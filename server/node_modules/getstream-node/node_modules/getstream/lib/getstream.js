"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = connect;
Object.defineProperty(exports, "Client", {
  enumerable: true,
  get: function get() {
    return _client.default;
  }
});
Object.defineProperty(exports, "errors", {
  enumerable: true,
  get: function get() {
    return _errors.default;
  }
});
Object.defineProperty(exports, "signing", {
  enumerable: true,
  get: function get() {
    return _signing.default;
  }
});
exports.default = void 0;

var _client = _interopRequireDefault(require("./lib/client"));

var _errors = _interopRequireDefault(require("./lib/errors"));

var _signing = _interopRequireDefault(require("./lib/signing"));

/**
 * @module stream
 * @author Thierry Schellenbach
 * BSD License
 */
function connect(apiKey, apiSecret, appId, options) {
  /**
   * Create StreamClient
   * @method connect
   * @param  {string} apiKey    API key
   * @param  {string} [apiSecret] API secret (only use this on the server)
   * @param  {string} [appId]     Application identifier
   * @param  {object} [options]   Additional options
   * @param  {string} [options.location] Datacenter location
   * @return {StreamClient}     StreamClient
   * @example <caption>Basic usage</caption>
   * stream.connect(apiKey, apiSecret);
   * @example <caption>or if you want to be able to subscribe and listen</caption>
   * stream.connect(apiKey, apiSecret, appId);
   * @example <caption>or on Heroku</caption>
   * stream.connect(streamURL);
   * @example <caption>where streamURL looks like</caption>
   * "https://thierry:pass@gestream.io/?app=1"
   */
  if (typeof process !== 'undefined' && process.env && process.env.STREAM_URL && !apiKey) {
    var parts = /https:\/\/(\w+):(\w+)@([\w-]*).*\?app_id=(\d+)/.exec(process.env.STREAM_URL);
    apiKey = parts[1];
    apiSecret = parts[2];
    var location = parts[3];
    appId = parts[4];

    if (options === undefined) {
      options = {};
    }

    if (location !== 'getstream' && location !== 'stream-io-api') {
      options.location = location;
    }
  }

  return new _client.default(apiKey, apiSecret, appId, options);
}

/* deprecated default export */
var _default = {
  connect: connect,
  errors: _errors.default,
  signing: _signing.default,
  Client: _client.default
};
exports.default = _default;