"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _formData = _interopRequireDefault(require("form-data"));

var _errors = _interopRequireDefault(require("./errors"));

var validFeedSlugRe = /^[\w]+$/;
var validUserIdRe = /^[\w-]+$/;

function validateFeedSlug(feedSlug) {
  /*
   * Validate that the feedSlug matches \w
   */
  if (!validFeedSlugRe.test(feedSlug)) {
    throw new _errors.default.FeedError("Invalid feedSlug, please use letters, numbers or _: ".concat(feedSlug));
  }

  return feedSlug;
}

function validateUserId(userId) {
  /*
   * Validate the userId matches \w
   */
  if (!validUserIdRe.test(userId)) {
    throw new _errors.default.FeedError("Invalid userId, please use letters, numbers, - or _: ".concat(userId));
  }

  return userId;
}

function rfc3986(str) {
  return str.replace(/[!'()*]/g, function (c) {
    return "%".concat(c.charCodeAt(0).toString(16).toUpperCase());
  });
}

function isReadableStream(obj) {
  return obj && (0, _typeof2.default)(obj) === 'object' && typeof obj._read === 'function' && (0, _typeof2.default)(obj._readableState) === 'object';
}

function validateFeedId(feedId) {
  /*
   * Validate that the feedId matches the spec user:1
   */
  var parts = feedId.split(':');

  if (parts.length !== 2) {
    throw new _errors.default.FeedError("Invalid feedId, expected something like user:1 got ".concat(feedId));
  }

  var _parts = (0, _slicedToArray2.default)(parts, 2),
      feedSlug = _parts[0],
      userId = _parts[1];

  validateFeedSlug(feedSlug);
  validateUserId(userId);
  return feedId;
}

function addFileToFormData(uri, name, contentType) {
  var data = new _formData.default();
  var fileField;

  if (isReadableStream(uri) || uri && uri.toString && uri.toString() === '[object File]') {
    fileField = uri;
  } else {
    fileField = {
      uri: uri,
      name: name || uri.split('/').reverse()[0]
    };
    if (contentType != null) fileField.type = contentType;
  }

  data.append('file', fileField);
  return data;
}

function replaceStreamObjects(obj) {
  if (Array.isArray(obj)) return obj.map(function (v) {
    return replaceStreamObjects(v);
  });
  if (Object.prototype.toString.call(obj) !== '[object Object]') return obj;
  if (typeof obj.ref === 'function') return obj.ref();
  var cloned = {};
  Object.keys(obj).forEach(function (k) {
    cloned[k] = replaceStreamObjects(obj[k]);
  });
  return cloned;
}

var _default = {
  validateFeedId: validateFeedId,
  validateFeedSlug: validateFeedSlug,
  validateUserId: validateUserId,
  rfc3986: rfc3986,
  isReadableStream: isReadableStream,
  addFileToFormData: addFileToFormData,
  replaceStreamObjects: replaceStreamObjects
};
exports.default = _default;